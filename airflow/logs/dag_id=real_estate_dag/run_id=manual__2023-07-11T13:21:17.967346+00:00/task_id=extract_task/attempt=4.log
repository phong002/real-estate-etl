[2023-07-11T13:38:45.119+0000] {taskinstance.py:1087} INFO - Dependencies all met for <TaskInstance: real_estate_dag.extract_task manual__2023-07-11T13:21:17.967346+00:00 [queued]>
[2023-07-11T13:38:45.142+0000] {taskinstance.py:1087} INFO - Dependencies all met for <TaskInstance: real_estate_dag.extract_task manual__2023-07-11T13:21:17.967346+00:00 [queued]>
[2023-07-11T13:38:45.143+0000] {taskinstance.py:1283} INFO - 
--------------------------------------------------------------------------------
[2023-07-11T13:38:45.143+0000] {taskinstance.py:1284} INFO - Starting attempt 4 of 4
[2023-07-11T13:38:45.143+0000] {taskinstance.py:1285} INFO - 
--------------------------------------------------------------------------------
[2023-07-11T13:38:45.167+0000] {taskinstance.py:1304} INFO - Executing <Task(PythonOperator): extract_task> on 2023-07-11 13:21:17.967346+00:00
[2023-07-11T13:38:45.175+0000] {standard_task_runner.py:55} INFO - Started process 11298 to run task
[2023-07-11T13:38:45.183+0000] {standard_task_runner.py:82} INFO - Running: ['***', 'tasks', 'run', 'real_estate_dag', 'extract_task', 'manual__2023-07-11T13:21:17.967346+00:00', '--job-id', '61', '--raw', '--subdir', 'DAGS_FOLDER/real_estate_etl_dag.py', '--cfg-path', '/tmp/tmph0e_zl54']
[2023-07-11T13:38:45.187+0000] {standard_task_runner.py:83} INFO - Job 61: Subtask extract_task
[2023-07-11T13:38:45.381+0000] {task_command.py:389} INFO - Running <TaskInstance: real_estate_dag.extract_task manual__2023-07-11T13:21:17.967346+00:00 [running]> on host ip-172-31-34-219.ap-southeast-2.compute.internal
[2023-07-11T13:38:45.490+0000] {taskinstance.py:1511} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=***
AIRFLOW_CTX_DAG_ID=real_estate_dag
AIRFLOW_CTX_TASK_ID=extract_task
AIRFLOW_CTX_EXECUTION_DATE=2023-07-11T13:21:17.967346+00:00
AIRFLOW_CTX_TRY_NUMBER=4
AIRFLOW_CTX_DAG_RUN_ID=manual__2023-07-11T13:21:17.967346+00:00
[2023-07-11T13:39:28.932+0000] {logging_mixin.py:137} INFO - Last page exceeded.
[2023-07-11T13:39:28.970+0000] {xcom.py:629} ERROR - Object of type DataFrame is not JSON serializable. If you are using pickle instead of JSON for XCom, then you need to enable pickle support for XCom in your *** config or make sure to decorate your object with attr.
[2023-07-11T13:39:28.974+0000] {taskinstance.py:1772} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/operators/python.py", line 175, in execute
    return_value = self.execute_callable()
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/operators/python.py", line 192, in execute_callable
    return self.python_callable(*self.op_args, **self.op_kwargs)
  File "/home/ubuntu/airflow/dags/real_estate_etl_dag.py", line 68, in scrape_listings_to_df
    ti.xcom_push(key='df', value=df)
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/utils/session.py", line 75, in wrapper
    return func(*args, session=session, **kwargs)
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/models/taskinstance.py", line 2294, in xcom_push
    XCom.set(
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/utils/session.py", line 72, in wrapper
    return func(*args, **kwargs)
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/models/xcom.py", line 234, in set
    value = cls.serialize_value(
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/models/xcom.py", line 627, in serialize_value
    return json.dumps(value, cls=XComEncoder).encode("UTF-8")
  File "/usr/lib/python3.10/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/utils/json.py", line 176, in encode
    return super().encode(o)
  File "/usr/lib/python3.10/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/lib/python3.10/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/home/ubuntu/venv/lib/python3.10/site-packages/airflow/utils/json.py", line 170, in default
    return super().default(o)
  File "/usr/lib/python3.10/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type DataFrame is not JSON serializable
[2023-07-11T13:39:29.012+0000] {taskinstance.py:1322} INFO - Marking task as FAILED. dag_id=real_estate_dag, task_id=extract_task, execution_date=20230711T132117, start_date=20230711T133845, end_date=20230711T133929
[2023-07-11T13:39:29.034+0000] {standard_task_runner.py:100} ERROR - Failed to execute job 61 for task extract_task (Object of type DataFrame is not JSON serializable; 11298)
[2023-07-11T13:39:29.066+0000] {local_task_job.py:159} INFO - Task exited with return code 1
[2023-07-11T13:39:29.115+0000] {taskinstance.py:2582} INFO - 0 downstream tasks scheduled from follow-on schedule check
